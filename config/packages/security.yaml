security:
    enable_authenticator_manager: true
   
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api_docs:
            pattern: ^/api$
            security: false

        user_public_api:
            methods: [ POST ]
            pattern: ^/api/users
            security: false

        categories_public_api:
            methods: [ GET ]
            pattern: ^/api/categories
            security: false

        products_public_api:
            methods: [ GET ]
            pattern: ^/api/products
            security: false

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            entry_point: jwt
            jwt: ~

        main:
            lazy: true
            # provider set earlier inside providers
            provider: app_user_provider
            form_login:
                login_path: login
                check_path: login
                default_target_path: home

            logout:
                path: logout
                target: home

    password_hashers:
        App\Entity\User:
            algorithm: auto


    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
       

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/categories, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: ^/api/products, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: ^/api/users, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [POST] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        ROLE_USER: ROLE_USER
        ROLE_ADMIN: ROLE_ADMIN
        ROLE_OWNER: ROLE_OWNER

when@test:
    security:
      